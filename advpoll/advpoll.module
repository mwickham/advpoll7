<?php

/*
 * @file
 * Advanced Poll Module 2/29/2012 MW
 */
module_load_include('inc', 'advpoll', 'includes/advpoll_voteapi');

/**
 * Implements hook_menu()
 * 
 */
function advpoll_menu() {
    
    $menu['node/%node/votes'] = array(
        'title' => 'Votes',
        'page callback' => 'advpoll_votes_page',
        'page arguments' => array(1),
     //   'access callback' => '_advpoll_votes_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
    );    
    // Show electoral list tab if using the functionality.
    $menu['node/%node/electoral_list'] = array(
        'title' => 'Electoral list',
        'page callback' => 'advpoll_electoral_list_page',
        'page arguments' => array(1),
    //    'access callback' => '_advpoll_electoral_list_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
    );

    // Allow voters to be removed.
    $menu['node/%node/remove'] = array(
        'page callback' => 'advpoll_remove_voter',
        'page arguments' => array(1),
   //     'access arguments' => array('administer polls'),
        'weight' => 3,
        'type' => MENU_CALLBACK,
        'file' => 'advpoll.admin.inc',
    );

    // Allow votes to be cleared.
    $menu['node/%node/votes/clear'] = array(
        'page callback' => 'advpoll_clear_votes_page',
        'page arguments' => array(1),
    //    'access callback' => '_advpoll_clear_votes_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
    );

    // Show the write-ins tab if there is at least one.
    $menu['node/%node/writeins'] = array(
        'title' => 'Write-ins',
        'page callback' => 'advpoll_writeins_page',
        'page arguments' => array(1),
      //  'access callback' => '_advpoll_writeins_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
    );
    
    $menu['node/%node/results'] = array(
        'title' => 'Results',
        'page callback' => 'advpoll_results_page',
        'page arguments' => array(1),
//        'access callback' => '_advpoll_results_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
    );    
    return $menu;
}


/**
 * Implements hook_node_view().
 *
 * Since node is defined as CCK in install script, could not use
 * hook_view and other related hooks since hook_info caused title
 * field to disappear as well as other wonkiness.
 */
function advpoll_node_view($node, $view_mode) {
  if ($node->type == 'advpoll') {
      
    drupal_add_css(drupal_get_path('module', 'advpoll') . '/css/advpoll.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

    $choices = $node->advpoll_choice['und'];
    unset($node->content['advpoll_choice']);

    if (advpoll_user_eligibility($node)) {
      $voteform = drupal_get_form('advpoll_choice_form', $node);
      $node->content['advpoll_choice'] = array(0 => $voteform, '#weight' => 1);
    } else {
      $behavior = $node->advpoll_behavior['und'][0]['value'];
      $voteResults = advpoll_display_results($choices, $node->type, $node->nid, $behavior);
      $node->content['advpoll_choice'] = array('#markup' => $voteResults, '#weight' => 1);
    }
  }
}

function advpoll_display_results($choices, $content_type, $nid, $behavior) {
  $results = advpoll_get_votes($content_type, $nid, $behavior);
  $count = count($choices);
  $output = '';

  foreach ($results['choices'] as $result) {
    $output .= theme('advpoll_bar', array(
                'title' => $choices[$result['index']]['choice'],
                'percentage' => $result['percentage'],
                'votes' => $result['votes']
                    )
    );
    // remove choices that have been accounted for
    unset($choices[$result['index']]);
  }

  // if there are left over choices, add bars for them
  if ($choices) {
    foreach ($choices as $key => $choice) {
      $output .= theme('advpoll_bar', array(
                  'title' => $choice['choice'],
                  'percentage' => 0,
                  'votes' => 0
                      )
      );
    }
  }

  return $output;
}

function advpoll_choice_form($form, &$form_state, $values) {

  $max = $values->advpoll_max_choices['und'][0]['value'];
  $choices = $values->advpoll_choice['und'];
  $count = count($choices);
  $nid = $form_state['build_info']['args'][0]->nid;
  $options = array();

  $form['#id'] = 'advpoll-form-' . $nid;
  for ($i = 0; $i < $count; $i++) {
    if (!$choices[$i]['write_in']) {
    $options[] = strip_tags($choices[$i]['choice']);
    }
  }

  if ($max > 1) {
    $form['choice_' + $count] = array(
        '#type' => 'checkboxes',
        '#title' => '',
        '#options' => drupal_map_assoc($options),
    );
  } else {
    $form['choice_' + $count] = array(
        '#type' => 'radios',
        '#title' => '',
        '#options' => drupal_map_assoc($options),
    );
  }

  $form['submit'] = array(
      '#type' => 'submit',
      '#ajax' => array(
          'callback' => 'advpoll_form_submit',
          'wrapper' => 'advpoll-form-' . $nid,
          'name' => 'submit1',
      ),
      '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Submit handler for voting
 */
function advpoll_form_submit($form, &$form_state) {
  $behavior = $form_state['build_info']['args'][0]->advpoll_behavior['und'][0]['value'];
  $mode = $form_state['build_info']['args'][0]->advpoll_mode['und'][0]['value'];
  $duration = (int) $form_state['build_info']['args'][0]->advpoll_cookie_duration['und'][0]['value'];
  $choices = $form_state['build_info']['args'][0]->advpoll_choice['und'];
  $max = (int) $form_state['build_info']['args'][0]->advpoll_max_choices['und'][0]['value'];
  $count = count($choices);
  $votes = $form_state['values'][$count];

  
  if ($max > 1) {
    $selected = advpoll_checkbox_selected($choices, $votes);
  } else {
    $selected = advpoll_radio_selected($choices, $votes);
  }

  
  if (count($selected) > 0 && count($selected) <= $max) {
    $markup = '';
    $nid = $form_state['build_info']['args'][0]->nid;
    global $user;

    foreach ($selected as $item) {
      $vote = array();
      $vote['type'] = 'advpoll';
      $vote['tag'] = $item;
      $vote['nid'] = $nid;
      $vote['mode'] = $mode;
      $vote['duration'] = $duration;
      advpoll_add_votes($vote);
    }

    $element['#markup'] = advpoll_display_results($choices, 'advpoll', $nid, $behavior);
    return $element;
  } else {
    $form['message'] = array(
        '#type' => 'markup',
        '#prefix' => '<div id="message">',
        '#suffix' => '</div>',
        '#markup' => t('Select up to @quantity @votes.', array('@quantity' => $max, '@votes' => format_plural($max, 'vote', 'votes'))),
    );
    return $form;
  }
}

/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function advpoll_theme($existing, $type, $theme, $path) {
  return array(
      'advpoll_bar' => array(
          'variables' => array('percentage' => 10, 'votes' => 1),
          'path' => drupal_get_path('module', 'advpoll') . '/templates',
          'template' => 'advpoll-bar'
      ),
  );
}