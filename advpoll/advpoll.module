<?php

/*
 * @file
 * Advanced Poll Module 2/29/2012 MW
 */
module_load_include('inc', 'advpoll', 'includes/advpoll_voteapi');
module_load_include('inc', 'advpoll', 'includes/advpoll_helper');

/**
 * Implements hook_menu()
 * 
 */
function advpoll_menu() {

    $menu['node/%node/votes'] = array(
        'title' => 'Votes',
        'page callback' => 'advpoll_votes_page',
        'page arguments' => array(1),
        'access callback' => '_advpoll_votes_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
        'file path' => drupal_get_path('module', 'advpoll') . '/includes',
    );
    // Show electoral list tab if using the functionality.
    $menu['node/%node/electoral_list'] = array(
        'title' => 'Electoral list',
        'page callback' => 'advpoll_electoral_list_page',
        'page arguments' => array(1),
        'access callback' => '_advpoll_electoral_list_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
        'file path' => drupal_get_path('module', 'advpoll') . '/includes',
    );

    // Allow voters to be removed.
    $menu['node/%node/remove'] = array(
        'page callback' => 'advpoll_remove_voter',
        'page arguments' => array(1),
        'access arguments' => array('administer polls'),
        'weight' => 3,
        'type' => MENU_CALLBACK,
        'file' => 'advpoll.pages.inc',
        'file path' => drupal_get_path('module', 'advpoll') . '/includes',
    );

    // Allow votes to be cleared.
    $menu['node/%node/votes/clear'] = array(
        'page callback' => 'advpoll_clear_votes_page',
        'page arguments' => array(1),
        'access callback' => '_advpoll_clear_votes_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
        'file path' => drupal_get_path('module', 'advpoll') . '/includes',
    );

    // Show the write-ins tab if there is at least one.
    $menu['node/%node/writeins'] = array(
        'title' => 'Write-ins',
        'page callback' => 'advpoll_writeins_page',
        'page arguments' => array(1),
        'access callback' => '_advpoll_writeins_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
        'file path' => drupal_get_path('module', 'advpoll') . '/includes',
    );

    $menu['node/%node/results'] = array(
        'title' => 'Results',
        'page callback' => 'advpoll_results_page',
        'page arguments' => array(1),
        'access callback' => '_advpoll_results_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file' => 'advpoll.pages.inc',
        'file path' => drupal_get_path('module', 'advpoll') . '/includes',
    );

    // Allow votes to be cleared.
    $menu['node/%node/votes/clear'] = array(
        'page callback' => 'advpoll_clear_votes_page',
        'page arguments' => array(1),
        'access callback' => '_advpoll_clear_votes_access',
        'access arguments' => array(1),
        'weight' => 3,
        'type' => MENU_LOCAL_TASK,
        'file path' => drupal_get_path('module', 'advpoll') . '/includes',
        'file' => 'advpoll.pages.inc',
    );
    return $menu;
}

/**
 * Implementation of hook_permission().
 * Note - rules for editting, deleting or creating polls is now handled by Node permissions
 * since the poll content types are CCK.
 */
function advpoll_permission() {
    return array(
        'vote on polls' => array(
            'title' => t('Vote on polls'),
            'description' => t('User may vote on polls.'),
        ),
        'cancel own vote' => array(
            'title' => t('Cancel own vote'),
            'description' => t('User may cancel their vote in cases where individual user votes are being tracked.'),
        ),
        'administer polls' => array(
            'title' => t('Administer polls'),
            'description' => t('User may use poll administration pages.'),
            'restrict access' => TRUE,
        ),
        'inspect all votes' => array(
            'title' => t('Inspect all votes'),
            'description' => t('User may use votes administration page.'),
            'restrict access' => TRUE,
        ),
        'show vote results' => array(
            'title' => t('Show vote results'),
            'description' => t('User may view poll results in cases where access to results is generally restricted.'),
        ),
        'access electoral list' => array(
            'title' => t('Access electoral list'),
            'description' => t('User may see electoral lists associated with each poll.'),
        ),
        'add write-ins' => array(
            'title' => t('Add write-in votes'),
            'description' => t('User may add write-ins for polls that allow them.'),
            'restrict access' => TRUE,
        ),
    );
}

/**
 * Implements hook_node_view().
 *
 * Since node is defined as CCK in install script, could not use
 * hook_view and other related hooks since hook_info caused title
 * field to disappear as well as other wonkiness.
 */
function advpoll_node_view($node, $view_mode) {
    if ($node->type == 'advpoll') {
        $data = advpoll_get_data($node);
        drupal_add_css(drupal_get_path('module', 'advpoll') . '/css/advpoll.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

        // replace the markup for choices with appropriate markup.
        unset($node->content['advpoll_choice']);
        if (advpoll_user_eligibility($node)) {
            $voteform = drupal_get_form('advpoll_choice_form', $node);
            $node->content['advpoll_choice'] = array(0 => $voteform, '#weight' => 1);
        } else {

            $voteResults = advpoll_display_results($node->type, $node->nid, $data);
            $node->content['advpoll_choice'] = array('#markup' => $voteResults, '#weight' => 1);
        }
    }
}

/*
 * Determines how to theme poll results based on settings in $data.
 * The $data object is returned from one of the helper functions in
 * advpoll_helper.inc.
 */

function advpoll_display_results($content_type, $nid, $data) {
    $output = '';


    if ($data->show_results == 'never' || $data->show_results == 'afterclose') {
        $output .= theme('advpoll_noresults', array(
                'data' => $data,
                    )
                );
    } else {
        $results = advpoll_get_votes($content_type, $nid, $data->behavior);

        $final = advpoll_update_choices($data->choices, $results['choices']);
        foreach ($final as $item) {
            $output .= theme('advpoll_bar', array(
                'title' => $item['title'],
                'percentage' => $item['percentage'],
                'votes' => $item['votes']
                    )
            );
        }
    }
    
    return $output;
}

/*
 * helper function to associate results with choices and order them properly.
 */

function advpoll_update_choices($choices, $results) {
    $choiceSet = array();
    foreach ($choices as $choice) {
        $choiceSet[$choice['choice_id']] = $choice['choice'];
    }

    $final = array();

    foreach ($results as $result) {
        $final[] = array(
            'title' => $choiceSet[$result['index']],
            'percentage' => $result['percentage'],
            'votes' => $result['votes']);
        unset($choiceSet[$result['index']]);
    }

    if (count($choiceSet) > 0) {
        foreach ($choiceSet as $key => $choice) {
            $final[] = array(
                'title' => $choice,
                'percentage' => 0,
                'votes' => 0,
            );
        }
    }

    return $final;
}

function advpoll_choice_form($form, &$form_state, $values) {
    $data = advpoll_get_data($values);
    $count = count($data->choices);
    $options = array();

    $form['#id'] = 'advpoll-form-' . $values->nid;
    for ($i = 0; $i < $count; $i++) {
        if (!$data->choices[$i]['write_in']) {
            $options[] = strip_tags($data->choices[$i]['choice']);
        }
    }

    if ($data->max_choices > 1) {
        $form['choice_' + $count] = array(
            '#type' => 'checkboxes',
            '#title' => '',
            '#options' => drupal_map_assoc($options),
        );
    } else {
        $form['choice_' + $count] = array(
            '#type' => 'radios',
            '#title' => '',
            '#options' => drupal_map_assoc($options),
        );
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#ajax' => array(
            'callback' => 'advpoll_form_submit',
            'wrapper' => 'advpoll-form-' . $values->nid,
            'name' => 'submit1',
        ),
        '#value' => t('Submit'),
    );

    return $form;
}

/**
 * Submit handler for voting
 */
function advpoll_form_submit($form, &$form_state) {
    $data = advpoll_get_form_data($form_state);
    $count = count($data->choices);

    $votes = $form[$count]['#value'];

    if ($data->max_choices > 1) {
        $selected = advpoll_checkbox_selected($data->choices, $votes);
    } else {
        $selected = advpoll_radio_selected($data->choices, $votes);
    }


    if (count($selected) > 0 && count($selected) <= $data->max_choices) {
        $markup = '';
        $nid = $form_state['build_info']['args'][0]->nid;
        global $user;

        foreach ($selected as $item) {
            $vote = array();
            $vote['type'] = 'advpoll';
            $vote['tag'] = $item;
            $vote['nid'] = $nid;
            $vote['mode'] = $data->mode;
            $vote['duration'] = $data->cookie_duration;
            advpoll_add_votes($vote);
        }

        $element['#markup'] = advpoll_display_results('advpoll', $nid, $data);
        return $element;
    } else {
        $form['message'] = array(
            '#type' => 'markup',
            '#prefix' => '<div id="message">',
            '#suffix' => '</div>',
            '#markup' => t('Select up to @quantity @votes.', array('@quantity' => $data->max_choices, '@votes' => format_plural($data->max_choices, 'vote', 'votes'))),
        );
        return $form;
    }
}

/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function advpoll_theme($existing, $type, $theme, $path) {
    return array(
        'advpoll_bar' => array(
            'variables' => array('percentage' => 10, 'votes' => 1),
            'path' => drupal_get_path('module', 'advpoll') . '/templates',
            'template' => 'advpoll-bar'
        ),
        'advpoll_closed' => array(
            'variables' => array('available_date' => time()),
            'path' => drupal_get_path('module', 'advpoll') . '/templates',
            'template' => 'advpoll-closed'
        ),
        'advpoll_noresults' => array(
            'variables' => array('available_date' => null),
            'path' => drupal_get_path('module', 'advpoll') . '/templates',
            'template' => 'advpoll-noresults'
        ),
        'advpoll_ineligible' => array(
            'variables' => array('available_date' => null),
            'path' => drupal_get_path('module', 'advpoll') . '/templates',
            'template' => 'advpoll-ineligible'
        ),
    );
}

/**
 * Results access callback.
 * Results tab displays the same bar graph of poll results that is displayed after casting
 * a vote. It is only available in cases where the results are not displayed after voting but
 * may be displayed after closing or may never be displayed. It offers a means for users
 * with the appropriate access to be able to see the results.
 */
function _advpoll_results_access($node) {
    $data = advpoll_get_data($node);
    $votes = advpoll_get_votes($node->type, $node->nid);
    return ($data->show_results && $votes['total'] > 0 && (user_access("show vote results") || user_access('administer polls')));
}

/**
 * Electorial list access callback.
 * Determines display of Electoral list tab.  Users that have permission to see Electoral
 * lists do not have permission to edit them.  A user must have administer polls permission
 * to be able to add or remove users from electoral list.
 */
function _advpoll_electoral_list_access($node) {
    $data = advpoll_get_data($node);
    return ((user_access('access electoral list') || user_access('administer polls')) && $data->electoral);
}

/**
 * Votes access callback.
 * Determines who is able to see the individual votes linked to user id or anonymous id.
 * Users with administer poll access can always see this page.
 */
function _advpoll_votes_access($node) {
    $data = advpoll_get_data($node);
    $votes = advpoll_get_votes($node->type, $node->nid);
    return ($votes['total'] > 0 && ((user_access('inspect all votes') && $data->show_votes) || user_access('administer polls')));
}

/**
 * Clear votes access callback.
 */
function _advpoll_clear_votes_access($node) {
    $votes = advpoll_get_votes($node->type, $node->nid);
    return ($votes['total'] > 0 && user_access('administer polls'));
}

/**
 * Writeins access callback.
 * Determine who can view the write-in administration page for a given node. 
 * Only users with administer poll level access should be able to view this page.
 */
function _advpoll_writeins_access($node) {
    $data = advpoll_get_data($node);
    return (user_access('administer polls') && $data->write_in);
}

