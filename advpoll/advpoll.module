<?php

/*
 * @file
 * Advanced Poll Module 2/29/2012 MW
 */
module_load_include('inc', 'advpoll', 'includes/advpoll_voteapi');

/**
 * Implements hook_node_view().
 *
 * Since node is defined as CCK in install script, could not use
 * hook_view and other related hooks since hook_info caused title
 * field to disappear as well as other wonkiness.
 */
function advpoll_node_view($node, $view_mode) {
    if ($node->type == 'advpoll') {
        drupal_add_css(drupal_get_path('module', 'advpoll') . '/css/advpoll.css', array('group' => CSS_DEFAULT, 'every_page' => TRUE));

        $choices = $node->advpoll_choice['und'];
        unset($node->content['advpoll_choice']);

        if (advpoll_user_eligibility($node)) {
            $voteform = drupal_get_form('advpoll_choice_form', $node);
            $node->content['advpoll_choice'] = array(0 => $voteform, '#weight' => 1);
        } else {
            $voteResults = advpoll_display_results($choices, $node->type, $node->nid);
            $node->content['advpoll_choice'] = array('#markup' => $voteResults, '#weight' => 1);
        }
    }
}

function advpoll_display_results($choices, $content_type, $nid) {
    $results = advpoll_get_votes($content_type, $nid);
    $count = count($choices);
    $output = '';
    for ($i = 0; $i < $count; $i++) {
        $output .= theme('advpoll_bar', array(
            'title' => $choices[$i]['safe_value'],
            'percentage' => 10,
            'votes' => 1
           )
        );
    }
    return $output;
}

function advpoll_choice_form($form, &$form_state, $values) {

    $max = $values->advpoll_max_choices['und'][0]['value'];
    $choices = $values->advpoll_choice['und'];
    $count = count($choices);
    $nid = $form_state['build_info']['args'][0]->nid;
    $options = array();

    $form['#id'] = 'advpoll-form-' . $nid;
    for ($i = 0; $i < $count; $i++) {
        $options[] = strip_tags($choices[$i]['value']);
    }

    if ($max > 1) {
        $form['choice_' + $count] = array(
            '#type' => 'checkboxes',
            '#title' => '',
            '#options' => drupal_map_assoc($options),
        );
    } else {
        $form['choice_' + $count] = array(
            '#type' => 'radios',
            '#title' => '',
            '#options' => drupal_map_assoc($options),
        );
    }

    $form['submit'] = array(
        '#type' => 'submit',
        '#ajax' => array(
            'callback' => 'advpoll_form_submit',
            'wrapper' => 'advpoll-form-' . $nid,
            'name' => 'submit1',
        ),
        '#value' => t('Submit'),
    );

    return $form;
}

/**
 * Submit handler for voting
 */
function advpoll_form_submit($form, &$form_state) {
    $mode = $form_state['build_info']['args'][0]->advpoll_mode['und'][0]['value'];
    $duration = (int) $form_state['build_info']['args'][0]->advpoll_cookie_duration['und'][0]['value'];
    $choices = $form_state['build_info']['args'][0]->advpoll_choice['und'];
    $max = (int) $form_state['build_info']['args'][0]->advpoll_max_choices['und'][0]['value'];
    $count = count($choices);
    $votes = $form_state['values'][$count];

    if ($max > 1) {
        $selected = advpoll_checkbox_selected($choices, $votes);
    } else {
        $selected = advpoll_radio_selected($choices, $votes);
    }

    if (count($selected) > 0 && count($selected) <= $max) {
        $markup = '';
        $nid = $form_state['build_info']['args'][0]->nid;
        global $user;

        foreach ($selected as $item) {
            $vote = array();
            $vote['type'] = 'advpoll';
            $vote['tag'] = $item;
            $vote['nid'] = $nid;
            $vote['mode'] = $mode;
            $vote['duration'] = $duration;
            advpoll_add_votes($vote);
        }

        $element['#markup'] = advpoll_display_results($choices, 'advpoll', $nid);
        return $element;
    } else {
        $form['message'] = array(
            '#type' => 'markup',
            '#prefix' => '<div id="message">',
            '#suffix' => '</div>',
            '#markup' => t('Select up to @quantity @votes.', array('@quantity' => $max, '@votes' => format_plural($max, 'vote', 'votes'))),
        );
        return $form;
    }
}

/**
 * Implements hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function advpoll_theme($existing, $type, $theme, $path) {
    return array(
        'advpoll_bar' => array(
            'variables' => array('percentage' => 10, 'votes' => 1),
            'path' => drupal_get_path('module', 'advpoll') . '/templates',
            'template' => 'advpoll-bar'
        ),
    );
}